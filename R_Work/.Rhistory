labs(title="Guinea Pig Tooth Growth by Dosage and Supplement Type",
x="Dose (mg/day)",
y="Tooth Length (mm)",
fill="Supplement Type") +
scale_fill_brewer(palette="Set2", labels=c("Orange Juice", "Vitamin C")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
)
library(ggplot2)
# Load required libraries
library(ggplot2)
# Create the box plot
ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=supp)) +
geom_boxplot() +
labs(title="Guinea Pig Tooth Growth by Dosage and Supplement Type",
x="Dose (mg/day)",
y="Tooth Length (mm)",
fill="Supplement Type") +
scale_fill_brewer(palette="Set2", labels=c("Orange Juice", "Vitamin C")) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "right"
)
# Load required libraries
library(ggplot2)
# Create the enhanced box plot with fixed title
ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=supp)) +
geom_boxplot() +
labs(title="Effect of Vitamin C Delivery Methods\non Guinea Pig Tooth Growth",
subtitle="Comparing Orange Juice vs Vitamin C Supplements",
x="Dose (mg/day)",
y="Tooth Length (mm)",
fill="Supplement Type") +
scale_fill_manual(values=c("orange", "red"),
labels=c("Orange Juice", "Vitamin C")) +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.5, face="bold", size=11),
plot.subtitle = element_text(hjust = 0.5, face="italic", size=10),
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_blank()
)
setwd("~/CSE_Notes/BILD_5/discussions/Week_6")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
knitr::opts_chunk$set(error = TRUE)
firstname <- "Zakir"   # example: "Liam"
lastname <- "Alibhai"  # example: "Mueller"
username <- "zalibhai"  #example: "lomueller"   Do not include the "@ucsd.edu" part!
library(tidyverse)
W6Data<-read.csv(file = "Week6SoilData.csv")
head(W6Data)
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q1 <- W6Data
High_Inorganic_N<-W6Data |> filter(SoilN2018 < .20)
High_Inorganic_N
###There are many ways to answer this question. Explain how your code counts how many gardens had high inorganic nitrogen in 2018
# [Your Explanation]
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
knitr::opts_chunk$set(error = TRUE)
knitr::opts_chunk$set(tidy = TRUE)
firstname <- "Zakir"   # example: "Liam"
lastname <- "Alibhai"  # example: "Mueller"
username <- "zalibhai"  #example: "lomueller"   Do not include the "@ucsd.edu" part!
library(tidyverse)
library(dplyr)
BadTable<-read.csv(text= "City,2014,2019
San Antonio,1436697,1547253
Houston,2239558,2320268
Austin,912791,978908")
head(BadTable)
GoodTable<-pivot_longer(BadTable, cols = 2:3, names_to = "Year", values_to = "population")
head(GoodTable)
### The pivot_longer function first loads in the variable/vector BadTable, and then selects the years to transform or "tidy" by slicing the second and third columns (in positions 2 and 3 in the csv).  Then, instead of a "wide" format where each row is a city and the years are spread across columns so the populations cells go horizontally, the code makes it "long" so that each row is a city-year combination, where years are in a single column, and cities are repeated so that there can be a separate population column. This makes it so that each row is a different data point, and you can read it vertically. The names and values to create the new 'Year' and population columns so that it's 6 rows for 3 cities by 2 years and 3 columns for City, Year, and Population.
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q1 <- GoodTable
q2 <-  "The GoodTable 'long' format is better than the 'wide' BadTable because each variable now has its own column to compare, rather than the intersecting CSV of 'CityxYear=population number' with multiple populations per row. Now each instance of data, or the measurements of populations, have their own rows, and aren't spread across the columns. This is labelled better and it's easier to see at a glance the corresponding numbers by city and year. It is 'tidy' because it is easier to read with a separate label for years and the population, which is probably easier for axis graphing too. The documentation says that each variable is its own column, each observation, or case of population, is in its own row, and you can access variables as vectors of columns due to the way R works."
SmallerCities<-GoodTable |> filter(population < 1500000)
head(SmallerCities)
### This does exactly what the documentation says: it loads GoodTable, uses the dplyr 'pipes' syntax (like squeezing the data) to call a filter function, and applies it and extracts the rows with our desired values by evaluating the conditional of cell / case values where the population is less than 1500000. If true, it extracts that column; kind of like an automatic for loop.
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q3 <- SmallerCities
OrderedGoodTable<-GoodTable |> arrange(desc(population))
head(OrderedGoodTable)
### Once again, this does exactly what the documentation says, and calls the 'arrange' function on GoodTable to manipulate it by literally just rearranging it according to a variable argument I passed, in this case population, and we add the 'desc' function call to order it high to low, or in 'descending' order, so that the table is ordered this way.
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q4 <- OrderedGoodTable
flights<-read.csv(file = "flights.csv")
weather<-read.csv(file = "JFKWeather.csv")
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q5 <- flights
q6 <- weather
CombinedTable<-inner_join(flights, weather, by = join_by(time_hour))
str(CombinedTable)
### Here, I called the inner_join with the syntax in the documentation, specifying the flights and weather datasets as my x and y variables to be combined or 'joined'. This function explicitly joins or concatenates data, which is what I want with adding 11 more columns (since each have 12, with the last one, time_hour, being a repeat/match or overlapping column) of the correct number of rows, as it only keeps the rows with matches. This is good because the instructions say both data tables share the 'time_hour' column, and thus matched the values since they're in both. I used column matching with 'join_by' so that it looked at the 'time_hour' column, and then for each flight, it found the weather data from the same hour, and then it merged the matching rows together, and got rid of any rows that didn't match. So basically, it matched each flight with the weather data at its time, again like a more complex for loop.
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q7 <- CombinedTable
q8<-"Continuous"
MeanDailyTemp<- weather |> group_by(day) |> summarise(avg = mean(temp))
str(MeanDailyTemp)
### Here, we use the 'pipes' to perform sequential operations on the weather dataset; first, I used the 'group_by' as shown in the documentation, before 'summarise', to create a copy of the table that groups all of the data by the 'day' column, so that when I call 'summarize', it will 'manipulate' each 'group' or day separately, and then combine the results. For the summarize part, I again followed the syntax in the documentation, which takes the column of temperatures 'temp' as the input vector, and then finds the mean of each case or row and returns the average back. It then stores the average of all the temperature values within each day group (since it was grouped/sorted that way) into a new column, 'avg', which is the average temperature for each day. Once again, this is a lot like a one-line for-loop that performs the mean operation on temperatures for each day and stores it into the new dataframe with just columns for the day and avg.
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q9 <- MeanDailyTemp
meanfebtemp <-mean(MeanDailyTemp$avg)
meanfebtemp
medianfebtemp <-median(MeanDailyTemp$avg)
medianfebtemp
### In which direction are the data skewed?
#It's a right skew, because the mean is greater than the median, so it's being pulled right with a positive difference.
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q10<- meanfebtemp
q11<- medianfebtemp
q12 <- "Right"
High_Inorganic_N<-W6Data |> pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Nitrogen < .20)
High_Inorganic_N<-W6Data |> pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Nitrogen < .20)
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Nitrogen < .20)
High_Inorganic_N
###There are many ways to answer this question. Explain how your code counts how many gardens had high inorganic nitrogen in 2018
# [Your Explanation]
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year = "SoilN2018") filter(Nitrogen < .20)
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year = SoilN2018) filter(Nitrogen < .20)
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year = SoilN2018) |> filter(Nitrogen < .20)
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == SoilN2018) |> filter(Nitrogen < .20)
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == "SoilN2018") |> filter(Nitrogen < .20)
High_Inorganic_N
###There are many ways to answer this question. Explain how your code counts how many gardens had high inorganic nitrogen in 2018
# [Your Explanation]
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == "SoilN2018") |> filter(Nitrogen < .20) |> count(GardenID)
High_Inorganic_N
###There are many ways to answer this question. Explain how your code counts how many gardens had high inorganic nitrogen in 2018
# [Your Explanation]
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == "SoilN2018") |> filter(Nitrogen < .20)
count(High_Inorganic_N)
###There are many ways to answer this question. Explain how your code counts how many gardens had high inorganic nitrogen in 2018
# [Your Explanation]
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == "SoilN2018") |> filter(Nitrogen < .20) |> count(High_Inorganic_N)
High_Inorganic_N<-count(number_ |> pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == "SoilN2018") |> filter(Nitrogen < .20)
High_Inorganic_N
High_Inorganic_N<-count(number) |> pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == "SoilN2018") |> filter(Nitrogen < .20)
High_Inorganic_N<-number |> pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == "SoilN2018") |> filter(Nitrogen < .20)
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == "SoilN2018") |> filter(Nitrogen > .20) |> count()
High_Inorganic_N
###There are many ways to answer this question. Explain how your code counts how many gardens had high inorganic nitrogen in 2018
# [Your Explanation]
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == "SoilN2018") |> filter(Nitrogen > .20) |> count() |> pull()
High_Inorganic_N
###There are many ways to answer this question. Explain how your code counts how many gardens had high inorganic nitrogen in 2018
# This question uses most of the functions from Week 4, and a couple new ones. It starts with making the table "tidy" like in question 1, where we use the 'pivot_longer'
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
knitr::opts_chunk$set(error = TRUE)
firstname <- "Zakir"   # example: "Liam"
lastname <- "Alibhai"  # example: "Mueller"
username <- "zalibhai"  #example: "lomueller"   Do not include the "@ucsd.edu" part!
library(tidyverse)
W6Data<-read.csv(file = "Week6SoilData.csv")
head(W6Data)
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q1 <- W6Data
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == "SoilN2018") |> filter(Nitrogen > .20) |> count() |> pull()
High_Inorganic_N
###There are many ways to answer this question. Explain how your code counts how many gardens had high inorganic nitrogen in 2018
# This question uses most of the functions from Week 4, and a couple new ones. It starts with making the table "tidy" like in question 1, where we use the 'pivot_longer' function slicing the second and third columns of the two years (2018 and 2021), and then making it 'long' so that we have a column for the gardens, year, and the nitrogen values. Each row is a different garden with a separate year and with unique nitrogen value. Then,
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q2 <- High_Inorganic_N
#TidyTable<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen")
Histogram1<-ggplot(data=pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen"), mapping = aes(x = Nitrogen)) +
geom_histogram()
Histogram1
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
knitr::opts_chunk$set(error = TRUE)
firstname <- "Zakir"   # example: "Liam"
lastname <- "Alibhai"  # example: "Mueller"
username <- "zalibhai"  #example: "lomueller"   Do not include the "@ucsd.edu" part!
library(tidyverse)
W6Data<-read.csv(file = "Week6SoilData.csv")
head(W6Data)
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q1 <- W6Data
High_Inorganic_N<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen") |> filter(Year == "SoilN2018") |> filter(Nitrogen > .20) |> count() |> pull()
High_Inorganic_N
###There are many ways to answer this question. Explain how your code counts how many gardens had high inorganic nitrogen in 2018
# This question uses most of the functions from Week 4, and a couple new ones. It starts with making the table "tidy" like in question 1, where we use the 'pivot_longer' function slicing the second and third columns of the two years (2018 and 2021), and then making it 'long' so that we have a column for the gardens, year, and the nitrogen values. Each row is a different garden with a separate year and with a unique nitrogen value. This makes it easier to filter the data and sort it by the year and nitrogen levels when it's in a tidy table.
#Then, I used the 'filter' function twice with two subsequent 'pipes' to only select the rows that had their year equal to the value for 2018, and then applied a second transformation/dplyr filter for if the Nitrogen level/value was greater than 0.20 (or greater than 20%). Finally, it uses the 'count' function to count the number of rows left, defined by the variables we specified in the last two pipes, and we get a dataframe with that number, and then we use the pull function to extract that value as a direct integer vector. This uses subsequent pipe operations, tidytable, sorting/filtering, and other dplyr functions.
### This chunk of code is for grading purposes.
### Don't change/delete this chunk of code.
q2 <- High_Inorganic_N
q3 <- "Natural"
TidyTable<-pivot_longer(W6Data, cols = 2:3, names_to = "Year", values_to = "Nitrogen")
Histogram1<-ggplot(data=TidyTable, mapping = aes(x = Nitrogen)) +
geom_histogram()
Histogram1
ks.test()
ks.test(TidyTable$Nitrogen,pnorm,mean(TidyTable$Nitrogen),sd(TidyTable$Nitrogen))
ks.test(W6Data$SoilN2018,pnorm,mean(W6Data$SoilN2018),sd(W6Data$SoilN2018))
ks.test(TidyTable$Nitrogen,pnorm,mean(TidyTable$Nitrogen),sd(TidyTable$Nitrogen))
ks.test(TidyTable$Nitrogen,pnorm,mean(TidyTable$Nitrogen),sd(TidyTable$Nitrogen))
ks.test(W6Data$SoilN2018,pnorm,mean(W6Data$SoilN2018),sd(W6Data$SoilN2018))
setwd("~/CSE_Notes/BILD_5/Lectures/R_Work")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(eval = TRUE)
knitr::opts_chunk$set(error = TRUE)
t.test.result<-t.test(W6Data$SoilN2018,W6Data$SoilN2021)
#t.test(W6Data$delta, mu = 0)
#t.test(W6Data$SoilN2018, W6Data$SoilN2021, paired = TRUE)
t.test.result
#T test Day 2
#Single Sample t test
BarleyData<-c(3,5,4,7,5,6,8,9,6,4,5,2,5,6,9,6,4,5,7)
meanBD<-mean(BarleyData)
sdBD<-sd(BarleyData)
SEBD<-sdBD/sqrt(length(BarleyData))
ExpectedMU<-6.2
t_scoreBD<- (meanBD-ExpectedMU)/SEBD
t.test(BarleyData,mu = 6.2)
#Paired t test
Control <- c(3.5, 3.9, 3.2, 3.1, 1.5, 3.2, 3.5, 3.8, 4.6, 1.1, 2.9, 1.9)
Treatment <- c(5.4, 5.5, 2.7, 4.4, 1.7, 4.2, 5.6, 5.1, 5.3, 4.5, 5.6, 1.6)
cbind(Control,Treatment)
delta<-Control-Treatment
cbind(Control,Treatment,delta)
DeltaMean<-mean(delta)
t.test(delta,mu = 0)
#or
t.test(Control,Treatment,paired = TRUE)
#It is the same thing!
#Two sample t test
Group1<-c(16, 19, 13, 15, 15, 17, 11, 17, 13, 15, 15, 15, 11, 15,  8, 16, 20, 10, 16, 10)
Group2<-c(19, 18, 18, 15, 17, 16, 18, 19, 20, 15, 14, 19, 13, 20, 21, 19, 12, 16, 16, 15)
t.test(Group1,Group2)
t.test(Group1,Group2,var.equal = TRUE)
curve(dt(x,100),xlim=c(-5,5),lwd=5)
curve(dt(x,1),xlim=c(-5,5),col="goldenrod",lwd=5,add=TRUE)
#Let's run a real example!
LectData<- read.csv("Week6Lect.csv")
library(tidyverse)
Control<-LectData|>filter(Group=="control")
Treatment <-LectData|>filter(Group=="treatment")
#What do we do next?
Control|>ggplot(mapping=aes(x+Response))+
geom_histogram
Control|>ggplot(mapping=aes(x+Response))+
geom_histogram()
Control|>ggplot(mapping=aes(x=Response))+
geom_histogram()
ks.test(Control$Response,pnorm,mean(Control$Response),sd(Control$Response))
ks.test(Treatment$Response,pnorm,mean(Treatment$Response),sd(Treatment$Response))
Treatment|>ggplot(mapping=aes(x=Response))+
geom_histogram()
t.test(Treatment$Response,Control$Response)
Treatment|>ggplot(mapping=aes(x=Response))+
geom_histogram()
Control|>ggplot(mapping=aes(x=Response))+
geom_histogram()
Treatment|>ggplot(mapping=aes(x=Response))+
geom_histogram()
A<-c(56,63,45,41,71,60,78,50,68,62)
B<-c(40,48,60,38,32,44,66,22,45,54)
C<-c(71,57,64,44,73,50,79,67,84,61)
data<-data.frame(A,B,C)
data<-data.frame(A,B,C)
View(data)
better_Data<-pivot_longer(data,1:3,names_to = "Group",values_to = "response")
#What if I want to compare 3 groups?
library(tidyverse)
better_Data<-pivot_longer(data,1:3,names_to = "Group",values_to = "response")
better_Data<-pivot_longer(data,1:3,names_to = "island",values_to = "birdcall")
View(better_Data))
View(better_Data)
model<-lm(birdcall~island,data =better_Data)
model
mean(A)
mean(A)-mean(B)
mean(C)-mean(B)
mean(C)-mean(A)
mean(A)
mean(A)-mean(B)
mean(C)-mean(A)
model$residuals
head(better_Data)
56-mean(A)
ks.test(model$residuals,"pnorm",mean(model$residuals),sd(model$residuals))
anova(model)
hist(model$residuals)
#What if I want to compare 3 groups?
library(tidyverse)
A<-c(56,63,45,41,71,60,78,50,68,62)
B<-c(40,48,60,38,32,44,66,22,45,54)
C<-c(71,57,64,44,73,50,79,67,84,61)
data<-data.frame(A,B,C)
better_Data<-pivot_longer(data,1:3,names_to = "island",values_to = "birdcall")
View(better_Data)
model<-lm(birdcall~island,data =better_Data)
model
mean(A)
mean(A)-mean(B)
mean(C)-mean(A)
model$residuals
head(better_Data)
56-mean(A)
ks.test(model$residuals,"pnorm",mean(model$residuals),sd(model$residuals))
hist(model$residuals)
anova(model)
TurkeyHSD(aov(model))
#What if I want to compare 3 groups?
library(tidyverse)
TurkeyHSD(aov(model))
TukeyHSD(aov(model))
mean(A)
plot<-ggplot(data=better_data,mapping=aes(x=island,y=birdcall,fill=color)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("Blue","Orange","Yellow"),y=c(190,190,170),label=c("A","B","C"))+
guides(fill="none")+
geom_boxplot(width = 0.5)
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=color)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("Blue","Orange","Yellow"),y=c(190,190,170),label=c("A","B","C"))+
guides(fill="none")+
geom_boxplot(width = 0.5)
plot
#What if I want to compare 3 groups?
library(tidyverse)
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=color)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("Blue","Orange","Yellow"),y=c(190,190,170),label=c("A","B","C"))+
guides(fill="none")+
geom_boxplot(width = 0.5)
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("Blue","Orange","Yellow"),y=c(190,190,170),label=c("A","B","C"))+
guides(fill="none")+
geom_boxplot(width = 0.5)
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("Blue","Orange","Yellow"),y=c(100,100,100),label=c("A","B","C"))+
guides(fill="none")+
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("Blue","Orange","Yellow"),y=c(100,100,100),label=c("A","B","C"))+
guides(fill="none")+
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("Blue","Orange","Yellow"),y=c(100,100,100),label=c("A","B","C"))+
guides(fill="none")+
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("Blue","Orange","Yellow"),y=c(100,100,100),label=c("A","B","C"))+
guides(fill="none")+
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("Blue","Orange","Yellow"),y=c(100,100,100),label=c("A","B","C"))+
guides(fill="none")+
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("Blue","Orange","Yellow"),y=c(100,100,100),label=c("A","B","C"))+
guides(fill="none")+
geom_boxplot()
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
#annotate(geom="text",x=c("Blue","Orange","Yellow"),y=c(100,100,100),label=c("A","B","C"))+
guides(fill="none")+
geom_boxplot()
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("A","B","C"),y=c(100,100,100),label=c("A","B","A"))+
guides(fill="none")+
geom_boxplot()
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("A","B","C"),y=c(75,50,80),label=c("A","B","A"))+
guides(fill="none")+
geom_boxplot()
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("A","B","C"),y=c(90,50,85),label=c("A","B","A"))+
guides(fill="none")+
geom_boxplot()
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("A","B","C"),y=c(85,60,90),label=c("A","B","A"))+
guides(fill="none")+
geom_boxplot()
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("A","B","C"),y=c(85,70,90),label=c("A","B","A"))+
guides(fill="none")+
geom_boxplot()
plot
plot<-ggplot(data=better_Data,mapping=aes(x=island,y=birdcall,fill=island)) +
theme_classic() +
scale_fill_manual(values = c("cornflowerblue", "darkorange2", "gold1"))+
xlab("Island") +
ylab("Birdcall") +
annotate(geom="text",x=c("A","B","C"),y=c(85,75,90),label=c("A","B","A"))+
guides(fill="none")+
geom_boxplot()
plot
length.cm<-c(64,69,71,67,63,62,66,60,65,68)
weight.g<-c(130,148,180,175,120,127,141,118,120,159)
cbind(length.cm,weight.g)
cov(length.cm,weight.g)
length.in<-length.cm/2.54
weight.lbs<-weight.g*0.00220462
cov(length.in,weight.lbs)
zlength.cm<-(length.cm-mean(length.cm))/ sd(length.cm)
sum(zlength.cm)
zlength.in<- (length.in-mean(length.in))/ sd(length.in)
scale(length.cm)
cbind(zlength.cm,zlength.in,scale(length.cm))
mean(zlength.cm)
sd(zlength.cm)
cov(scale(length.in),scale(weight.g))
cor(length.in,weight.g)
r<-cor(length.in,weight.g)
Ser <- sqrt(1-(r^2))/sqrt(10-2)
tscore <- (cor(length.in,weight.g)-0)/Ser
cor.test(length.in,weight.g)
cor.test(length.in,weight.g,method = "spearman")
cor.test(rank(length.in),rank(weight.g))
plot(rank(length.in),rank(weight.g))
#The code you need. It is only 4 lines, and 2 of them you saw last week:
#Here are some data, not in a csv or data frame, so keep that in mind for homework.
mass.g<-c(17.7,18.7,17.2,20.1,19.1,17.7,18.9,19.8,15.8,19.5)
nitrogen.ppm<-c(8.26,7.45,6.95,8.53,9.37,8.49,9.7,9.09,7.34,9.69)
#Correlation
cor.test(mass.g,nitrogen.ppm)
#Order does not matter!
cor.test(nitrogen.ppm,mass.g)#identical output
#Regression
#Build a model:
model<-lm(mass.g~nitrogen.ppm)
#Test the model
summary(model) #Good, lots of info
anova(model) #Also fine, less info
r2<-7.4667/(7.4667 + 8.5783)
r2
